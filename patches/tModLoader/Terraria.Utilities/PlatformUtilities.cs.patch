--- src/Terraria\Terraria.Utilities\PlatformUtilities.cs
+++ src/tModLoader\Terraria.Utilities\PlatformUtilities.cs
@@ -1,8 +_,10 @@
-#if !WINDOWS
+#if FNA
 using SDL2;
 #endif
 using System;
-
+using System.Reflection;
+using Microsoft.Win32;
+using Microsoft.Xna.Framework.Graphics;
 #if !WINDOWS
 using System.IO;
 using System.Runtime.InteropServices;
@@ -11,7 +_,7 @@
 {
 	public static class PlatformUtilities
 	{
-		#if !WINDOWS
+		#if FNA
 		private struct SDL_Surface
 		{
 			private uint flags;
@@ -27,30 +_,15 @@
 			private IntPtr map;
 			private int refcount;
 		}
-		#endif
-		#if WINDOWS
-		public const bool IsXNA = true;
-		public const bool IsFNA = false;
-		public const bool IsWindows = true;
+#endif
+		public static readonly bool IsXNA = XNACheck();
+		public static readonly bool IsFNA = !IsXNA;
+		public static readonly bool IsWindows = RunningPlatform() == PlatformID.Win32NT;
+		public static readonly bool IsOSX = RunningPlatform() == PlatformID.MacOSX;
+		public static readonly bool IsLinux = RunningPlatform() == PlatformID.Unix;
+		
 
-#else
-		public const bool IsXNA = false;
-		public const bool IsFNA = true;
-		public const bool IsWindows = false;
-		#endif
-		#if MAC
-		public const bool IsOSX = true;
-
-#else
-		public const bool IsOSX = false;
-		#endif
-		#if LINUX
-		public const bool IsLinux = true;
-
-#else
-		public const bool IsLinux = false;
-		#endif
-		#if !WINDOWS
+#if !XNA
 		public unsafe static void SavePng(Stream stream, int width, int height, int imgWidth, int imgHeight, byte[] data)
 		{
 			IntPtr intPtr = SDL.SDL_CreateRGBSurface(0u, imgWidth, imgHeight, 32, 255u, 65280u, 16711680u, 4278190080u);
@@ -67,12 +_,51 @@
 				intPtr = intPtr2;
 			}
 			byte[] array = new byte[width * height * 4 + 41 + 57 + 256];
-			IntPtr intPtr3 = SDL.SDL_RWFromMem(array, array.Length);
+			GCHandle handle = GCHandle.Alloc(array, GCHandleType.Pinned);
+			IntPtr intPtr3 = SDL.SDL_RWFromMem(handle.AddrOfPinnedObject(), array.Length);
 			SDL_image.IMG_SavePNG_RW(intPtr, intPtr3, 1);
 			SDL.SDL_FreeSurface(intPtr);
 			int count = ((int)array[33] << 24 | (int)array[34] << 16 | (int)array[35] << 8 | (int)array[36]) + 41 + 57;
 			stream.Write(array, 0, count);
 		}
-		#endif
+#endif
+
+		public static PlatformID RunningPlatform() {
+			switch (Environment.OSVersion.Platform) {
+				case PlatformID.Unix:
+					if (Directory.Exists("/Applications")
+					    & Directory.Exists("/System")
+					    & Directory.Exists("/Users")
+					    & Directory.Exists("/Volumes")) {
+						return PlatformID.MacOSX;
+					}
+					else {
+						return PlatformID.Unix;
+					}
+
+				case PlatformID.MacOSX:
+					return PlatformID.MacOSX;
+
+				default:
+					return PlatformID.Win32NT;
+			}
+		}
+
+		public static bool XNACheck() {
+			return Assembly.GetAssembly(typeof(GraphicsProfile)).GetType("Microsoft.Xna.Framework.Graphics.ProfileCapabilities") != null;
+		}
+
+		public static bool RegisteryKeyInstalled(string regkey) {
+
+			if (Environment.OSVersion.Platform == PlatformID.Win32NT) {
+				var key = Registry.LocalMachine.OpenSubKey(regkey);
+				if (key == null)
+					return false;
+				else
+					return true;
+			}
+
+			return true;
+		}
 	}
 }

